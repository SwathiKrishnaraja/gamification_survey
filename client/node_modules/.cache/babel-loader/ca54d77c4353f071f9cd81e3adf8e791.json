{"ast":null,"code":"import _toConsumableArray from\"/Users/gowthammohan/Swathi/gamification_survey/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/gowthammohan/Swathi/gamification_survey/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import*as Survey from'survey-react';import{useHistory}from'react-router-dom';import badgeProvider from'../BadgeRules/BadgeRules';import{useDispatch,useStore}from'react-redux';import json from'./GamifiedSurveyJSON';export var model=new Survey.Model(json);var SurveyQuestions=function SurveyQuestions(_ref){var handleProgress=_ref.handleProgress;var dispatch=useDispatch();var provideBadge=badgeProvider(dispatch);var store=useStore();var _useState=useState(0),_useState2=_slicedToArray(_useState,2),isTactician=_useState2[0],setIsTactician=_useState2[1];var history=useHistory();var _useState3=useState([{name:'',id:'0',isAnswered:true}]),_useState4=_slicedToArray(_useState3,2),answerStore=_useState4[0],setAnswerStore=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),count=_useState6[0],setCount=_useState6[1];var listOfLastPageQuestions=['q25','q26'];var handleSurveyAnswer=function handleSurveyAnswer(sender,options){var question=options.question;if(!answerStore.find(function(element){return element.id===question.id;})){setAnswerStore([].concat(_toConsumableArray(answerStore),[{name:question.name,id:question.id,isAnswered:question.isAnswered}]));if(question.isAnswered){setCount(count+1);}}};var handlePageChange=function handlePageChange(sender,options){handleProgress();var newCurrentPage=options.newCurrentPage,oldCurrentPage=options.oldCurrentPage;// stops the time of previous page and starts the new timer\nmodel.stopTimer();model.startTimer();var timeSpentOnPreviousPage=oldCurrentPage===null||oldCurrentPage===void 0?void 0:oldCurrentPage.timeSpent;if(timeSpentOnPreviousPage>1){setIsTactician(isTactician+1);}// below is the check to provide badge if the user has reached the last page of the survey\nif(newCurrentPage.name==='page8'){provideBadge.badge.fastAchiever();}};// below check is to provide the badge if all the questions in the last page is answered\nuseEffect(function(){if(answerStore.filter(function(element){return listOfLastPageQuestions.includes(element.name);}).length===2){provideBadge.badge.masterOfInterview();}if(isTactician===8){setIsTactician(0);provideBadge.badge.tactician();}},[answerStore,isTactician,listOfLastPageQuestions,provideBadge.badge]);useEffect(function(){switch(count){case 9:provideBadge.badge.thirtyThreeBadge();break;case 17:provideBadge.badge.sixtySixBadge();break;case 26:provideBadge.badge.fullPoints();var currentStore=store.getState();if(Object.keys(currentStore).length===9){provideBadge.badge.medalCollector();}break;default:console.log(count);}return function(){};},[count,provideBadge.badge,store]);var handleSurveyCompletion=function handleSurveyCompletion(){provideBadge.badge.winner();history.push('/Dashboard');};return/*#__PURE__*/React.createElement(Survey.Survey,{model:model,onValueChanged:handleSurveyAnswer,onComplete:handleSurveyCompletion,onCurrentPageChanged:handlePageChange});};export default SurveyQuestions;","map":{"version":3,"sources":["/Users/gowthammohan/Swathi/gamification_survey/client/src/survey/GamifiedSurveyQuestions.tsx"],"names":["React","useState","useEffect","Survey","useHistory","badgeProvider","useDispatch","useStore","json","model","Model","SurveyQuestions","handleProgress","dispatch","provideBadge","store","isTactician","setIsTactician","history","name","id","isAnswered","answerStore","setAnswerStore","count","setCount","listOfLastPageQuestions","handleSurveyAnswer","sender","options","question","find","element","handlePageChange","newCurrentPage","oldCurrentPage","stopTimer","startTimer","timeSpentOnPreviousPage","timeSpent","badge","fastAchiever","filter","includes","length","masterOfInterview","tactician","thirtyThreeBadge","sixtySixBadge","fullPoints","currentStore","getState","Object","keys","medalCollector","console","log","handleSurveyCompletion","winner","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport * as Survey from 'survey-react'\nimport { useHistory } from 'react-router-dom'\nimport badgeProvider from '../BadgeRules/BadgeRules';\nimport { useDispatch, useSelector, useStore, shallowEqual } from 'react-redux';\nimport json from './GamifiedSurveyJSON'\n\nexport const model = new Survey.Model(json);\ntype AnswerStore = {\n    name: string,\n    id: string,\n    isAnswered: boolean\n}\n\ntype Props = {\n    progress: number,\n    handleProgress: () => void\n}\n\nconst SurveyQuestions = ({ handleProgress }: Props) => {\n    const dispatch = useDispatch()\n    const provideBadge = badgeProvider(dispatch)\n    const store = useStore()\n    const [isTactician, setIsTactician] = useState(0)\n\n    const history = useHistory()\n    const [answerStore, setAnswerStore] = useState<Array<AnswerStore>>([{ name: '', id: '0', isAnswered: true }])\n    const [count, setCount] = useState(0)\n    const listOfLastPageQuestions = ['q25', 'q26']\n\n    const handleSurveyAnswer = (sender: Survey.SurveyModel, options: any): any => {\n        const { question } = options\n        if (!(answerStore.find(element => element.id === question.id))) {\n            setAnswerStore([\n                ...answerStore,\n                {\n                    name: question.name,\n                    id: question.id,\n                    isAnswered: question.isAnswered\n                }\n            ])\n            if (question.isAnswered) {\n                setCount(count + 1)\n            }\n\n\n        }\n    }\n    const handlePageChange = (sender: Survey.SurveyModel, options: any): any => {\n        handleProgress()\n        const { newCurrentPage, oldCurrentPage } = options\n        // stops the time of previous page and starts the new timer\n        model.stopTimer()\n        model.startTimer()\n        const timeSpentOnPreviousPage = oldCurrentPage?.timeSpent\n        if (timeSpentOnPreviousPage > 1) {\n            setIsTactician(isTactician + 1)\n        }\n\n        // below is the check to provide badge if the user has reached the last page of the survey\n        if (newCurrentPage.name === 'page8') {\n            provideBadge.badge.fastAchiever()\n        }\n    }\n\n    // below check is to provide the badge if all the questions in the last page is answered\n    useEffect(() => {\n        if (answerStore\n            .filter(element => listOfLastPageQuestions.includes(element.name))\n            .length === 2) {\n            provideBadge.badge.masterOfInterview()\n        }\n        if (isTactician === 8) {\n            setIsTactician(0)\n            provideBadge.badge.tactician()\n        }\n    }, [answerStore, isTactician, listOfLastPageQuestions, provideBadge.badge])\n\n\n\n\n    useEffect(() => {\n        switch (count) {\n            case 9:\n                provideBadge.badge.thirtyThreeBadge()\n                break\n            case 17:\n                provideBadge.badge.sixtySixBadge()\n                break\n            case 26:\n                provideBadge.badge.fullPoints()\n                const currentStore = store.getState()\n                if (Object.keys(currentStore).length === 9) {\n                    provideBadge.badge.medalCollector()\n                }\n                break\n            default:\n                console.log(count)\n        }\n        return () => {\n        }\n    }, [count, provideBadge.badge, store])\n\n    const handleSurveyCompletion = () => {\n        provideBadge.badge.winner()\n        history.push('/Dashboard')\n    }\n\n    return (\n        <Survey.Survey model={model}\n            onValueChanged={handleSurveyAnswer}\n            onComplete={handleSurveyCompletion}\n            onCurrentPageChanged={handlePageChange}\n        />\n    )\n}\nexport default SurveyQuestions "]},"metadata":{},"sourceType":"module"}