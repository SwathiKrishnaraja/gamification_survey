{"ast":null,"code":"import _toConsumableArray from\"/Users/gowthammohan/Swathi/gamification_survey/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/gowthammohan/Swathi/gamification_survey/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Notifications from'./Notifications';import{useDispatch,useSelector}from'react-redux';var Toast=function Toast(){var dispatch=useDispatch();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showBadge=_useState2[0],setShowBadge=_useState2[1];var _useState3=useState([{src:'',description:'',id:0,isAchieved:true,isNotified:true,name:''}]),_useState4=_slicedToArray(_useState3,2),badges=_useState4[0],setBadges=_useState4[1];var handleBadgeClose=function handleBadgeClose(){setShowBadge(false);};var newBadge=useSelector(function(state){return state.filter(function(badge){return!badge.isNotified;});});useEffect(function(){if(newBadge.length>=1){newBadge.forEach(function(badge){dispatch({type:'NOTIFY_BADGE',payload:badge});setShowBadge(true);setBadges(_toConsumableArray(newBadge));});}},[badges,dispatch,newBadge]);return showBadge?/*#__PURE__*/React.createElement(Notifications,{badges:badges,showBadge:showBadge,handleBadgeClose:handleBadgeClose}):null;};export default Toast;","map":{"version":3,"sources":["/Users/gowthammohan/Swathi/gamification_survey/client/src/Toast/Toast.tsx"],"names":["React","useState","useEffect","Notifications","useDispatch","useSelector","Toast","dispatch","showBadge","setShowBadge","src","description","id","isAchieved","isNotified","name","badges","setBadges","handleBadgeClose","newBadge","state","filter","badge","length","forEach","type","payload"],"mappings":"gWAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAGA,GAAMC,CAAAA,KAAe,CAAG,QAAlBA,CAAAA,KAAkB,EAAM,CAC1B,GAAMC,CAAAA,QAAQ,CAAGH,WAAW,EAA5B,CAD0B,cAEQH,QAAQ,CAAC,KAAD,CAFhB,wCAEnBO,SAFmB,eAERC,YAFQ,8BAGER,QAAQ,CAAe,CAAC,CAChDS,GAAG,CAAE,EAD2C,CAEhDC,WAAW,CAAE,EAFmC,CAGhDC,EAAE,CAAE,CAH4C,CAIhDC,UAAU,CAAE,IAJoC,CAKhDC,UAAU,CAAE,IALoC,CAMhDC,IAAI,CAAE,EAN0C,CAAD,CAAf,CAHV,yCAGnBC,MAHmB,eAGXC,SAHW,eAW1B,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC3BT,YAAY,CAAC,KAAD,CAAZ,CACH,CAFD,CAIA,GAAMU,CAAAA,QAAsB,CAAGd,WAAW,CAAC,SAACe,KAAD,CAAyB,CAChE,MAAOA,CAAAA,KAAK,CAACC,MAAN,CAAa,SAACC,KAAD,QAAkB,CAAEA,KAAK,CAACR,UAA1B,EAAb,CAAP,CACH,CAFyC,CAA1C,CAKAZ,SAAS,CAAC,UAAM,CACZ,GAAIiB,QAAQ,CAACI,MAAT,EAAmB,CAAvB,CAA0B,CACtBJ,QAAQ,CAACK,OAAT,CAAiB,SAAAF,KAAK,CAAI,CACtBf,QAAQ,CAAC,CAAEkB,IAAI,CAAE,cAAR,CAAwBC,OAAO,CAAEJ,KAAjC,CAAD,CAAR,CACAb,YAAY,CAAC,IAAD,CAAZ,CACAQ,SAAS,oBACFE,QADE,EAAT,CAGH,CAND,EAOH,CACJ,CAVQ,CAUN,CAACH,MAAD,CAAST,QAAT,CAAmBY,QAAnB,CAVM,CAAT,CAYA,MACIX,CAAAA,SAAS,cACL,oBAAC,aAAD,EAAe,MAAM,CAAEQ,MAAvB,CAA+B,SAAS,CAAER,SAA1C,CAAqD,gBAAgB,CAAEU,gBAAvE,EADK,CAEH,IAHV,CAMH,CAtCD,CAwCA,cAAeZ,CAAAA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Notifications from './Notifications'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Badge } from '../types/types'\n\nconst Toast: React.FC = () => {\n    const dispatch = useDispatch()\n    const [showBadge, setShowBadge] = useState(false)\n    const [badges, setBadges] = useState<Array<Badge>>([{\n        src: '',\n        description: '',\n        id: 0,\n        isAchieved: true,\n        isNotified: true,\n        name: ''\n    }])\n    const handleBadgeClose = () => {\n        setShowBadge(false)\n    }\n\n    const newBadge: Array<Badge> = useSelector((state: Array<Badge>) => {\n        return state.filter((badge: Badge) => !(badge.isNotified))\n    })\n\n\n    useEffect(() => {\n        if (newBadge.length >= 1) {\n            newBadge.forEach(badge => {\n                dispatch({ type: 'NOTIFY_BADGE', payload: badge })\n                setShowBadge(true)\n                setBadges([\n                    ...newBadge\n                ])\n            })\n        }\n    }, [badges, dispatch, newBadge])\n\n    return (\n        showBadge ?\n            <Notifications badges={badges} showBadge={showBadge} handleBadgeClose={handleBadgeClose} />\n            : null\n    )\n\n}\n\nexport default Toast"]},"metadata":{},"sourceType":"module"}