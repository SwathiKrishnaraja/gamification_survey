{"ast":null,"code":"var _jsxFileName = \"/Users/gowthammohan/Swathi/gamification_survey/src/Toast/Toast.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Notifications from './Notifications';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Toast = () => {\n  const dispatch = useDispatch();\n  const [showBadge, setShowBadge] = useState(false);\n  const [badges, setBadges] = useState([{\n    src: '',\n    description: '',\n    id: 0,\n    isAchieved: true,\n    isNotified: true,\n    name: ''\n  }]);\n\n  const handleBadgeClose = () => {\n    setShowBadge(false);\n  };\n\n  const newBadge = useSelector(state => {\n    return state.filter(badge => !badge.isNotified);\n  });\n  useEffect(() => {\n    if (newBadge.length >= 1) {\n      newBadge.forEach(badge => {\n        dispatch({\n          type: 'NOTIFY_BADGE',\n          payload: badge\n        });\n        setShowBadge(true);\n        setBadges([...newBadge]);\n      });\n    }\n  }, [badges, dispatch, newBadge]);\n  return showBadge ? /*#__PURE__*/React.createElement(Notifications, {\n    badges: badges,\n    showBadge: showBadge,\n    handleBadgeClose: handleBadgeClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }) : null;\n};\n\nexport default Toast;","map":{"version":3,"sources":["/Users/gowthammohan/Swathi/gamification_survey/src/Toast/Toast.tsx"],"names":["React","useState","useEffect","Notifications","useDispatch","useSelector","Toast","dispatch","showBadge","setShowBadge","badges","setBadges","src","description","id","isAchieved","isNotified","name","handleBadgeClose","newBadge","state","filter","badge","length","forEach","type","payload"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAGA,MAAMC,KAAe,GAAG,MAAM;AAC1B,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAe,CAAC;AAChDW,IAAAA,GAAG,EAAE,EAD2C;AAEhDC,IAAAA,WAAW,EAAE,EAFmC;AAGhDC,IAAAA,EAAE,EAAE,CAH4C;AAIhDC,IAAAA,UAAU,EAAE,IAJoC;AAKhDC,IAAAA,UAAU,EAAE,IALoC;AAMhDC,IAAAA,IAAI,EAAE;AAN0C,GAAD,CAAf,CAApC;;AAQA,QAAMC,gBAAgB,GAAG,MAAM;AAC3BT,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAFD;;AAIA,QAAMU,QAAsB,GAAGd,WAAW,CAAEe,KAAD,IAAyB;AAChE,WAAOA,KAAK,CAACC,MAAN,CAAcC,KAAD,IAAkB,CAAEA,KAAK,CAACN,UAAvC,CAAP;AACH,GAFyC,CAA1C;AAKAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiB,QAAQ,CAACI,MAAT,IAAmB,CAAvB,EAA0B;AACtBJ,MAAAA,QAAQ,CAACK,OAAT,CAAiBF,KAAK,IAAI;AACtBf,QAAAA,QAAQ,CAAC;AAAEkB,UAAAA,IAAI,EAAE,cAAR;AAAwBC,UAAAA,OAAO,EAAEJ;AAAjC,SAAD,CAAR;AACAb,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,QAAAA,SAAS,CAAC,CACN,GAAGQ,QADG,CAAD,CAAT;AAGH,OAND;AAOH;AACJ,GAVQ,EAUN,CAACT,MAAD,EAASH,QAAT,EAAmBY,QAAnB,CAVM,CAAT;AAYA,SACIX,SAAS,gBACL,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAEE,MAAvB;AAA+B,IAAA,SAAS,EAAEF,SAA1C;AAAqD,IAAA,gBAAgB,EAAEU,gBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAEH,IAHV;AAMH,CAtCD;;AAwCA,eAAeZ,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Notifications from './Notifications'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Badge } from '../types/types'\n\nconst Toast: React.FC = () => {\n    const dispatch = useDispatch()\n    const [showBadge, setShowBadge] = useState(false)\n    const [badges, setBadges] = useState<Array<Badge>>([{\n        src: '',\n        description: '',\n        id: 0,\n        isAchieved: true,\n        isNotified: true,\n        name: ''\n    }])\n    const handleBadgeClose = () => {\n        setShowBadge(false)\n    }\n\n    const newBadge: Array<Badge> = useSelector((state: Array<Badge>) => {\n        return state.filter((badge: Badge) => !(badge.isNotified))\n    })\n\n\n    useEffect(() => {\n        if (newBadge.length >= 1) {\n            newBadge.forEach(badge => {\n                dispatch({ type: 'NOTIFY_BADGE', payload: badge })\n                setShowBadge(true)\n                setBadges([\n                    ...newBadge\n                ])\n            })\n        }\n    }, [badges, dispatch, newBadge])\n\n    return (\n        showBadge ?\n            <Notifications badges={badges} showBadge={showBadge} handleBadgeClose={handleBadgeClose} />\n            : null\n    )\n\n}\n\nexport default Toast"]},"metadata":{},"sourceType":"module"}