{"ast":null,"code":"const defaultState = [{\n  id: 1,\n  src: '',\n  name: '',\n  description: '',\n  isAchieved: false,\n  isNotified: true\n}];\n\nconst addBadgeReducer = (state = defaultState, action) => {\n  const {\n    payload\n  } = action;\n\n  switch (action.type) {\n    case 'ADD_BADGE':\n      return [...state, { ...payload,\n        isAchieved: true\n      }];\n\n    case 'NOTIFY_BADGE':\n      return [...state.map(badge => {\n        if (badge.id === payload.id) {\n          return { ...badge,\n            isNotified: true\n          };\n        } else {\n          return badge;\n        }\n      })];\n\n    case 'REMOVE_BADGE':\n      console.log(state);\n      return [...state.filter(badge => badge.id !== payload.id)];\n\n    default:\n      return state;\n  }\n};\n\nexport default addBadgeReducer;","map":{"version":3,"sources":["/Users/gowthammohan/Swathi/gamification_survey/src/reducer/reducer.tsx"],"names":["defaultState","id","src","name","description","isAchieved","isNotified","addBadgeReducer","state","action","payload","type","map","badge","console","log","filter"],"mappings":"AAOA,MAAMA,YAA0B,GAAG,CAC/B;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIC,EAAAA,GAAG,EAAE,EAFT;AAGIC,EAAAA,IAAI,EAAE,EAHV;AAIIC,EAAAA,WAAW,EAAE,EAJjB;AAKIC,EAAAA,UAAU,EAAE,KALhB;AAMIC,EAAAA,UAAU,EAAE;AANhB,CAD+B,CAAnC;;AAWA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAA6D;AACjF,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB;;AACA,UAAQA,MAAM,CAACE,IAAf;AACI,SAAK,WAAL;AACI,aAAO,CACH,GAAGH,KADA,EAEH,EACI,GAAGE,OADP;AAEIL,QAAAA,UAAU,EAAE;AAFhB,OAFG,CAAP;;AAOJ,SAAK,cAAL;AACI,aAAO,CACH,GAAGG,KAAK,CAACI,GAAN,CAAUC,KAAK,IAAI;AAClB,YAAIA,KAAK,CAACZ,EAAN,KAAaS,OAAO,CAACT,EAAzB,EAA6B;AACzB,iBAAQ,EACJ,GAAGY,KADC;AAEJP,YAAAA,UAAU,EAAE;AAFR,WAAR;AAIH,SALD,MAKO;AACH,iBAAOO,KAAP;AACH;AACJ,OATE,CADA,CAAP;;AAaJ,SAAK,cAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACA,aAAO,CACH,GAAGA,KAAK,CAACQ,MAAN,CAAaH,KAAK,IAAIA,KAAK,CAACZ,EAAN,KAAaS,OAAO,CAACT,EAA3C,CADA,CAAP;;AAIJ;AACI,aAAOO,KAAP;AA9BR;AAgCH,CAlCD;;AAmCA,eAAeD,eAAf","sourcesContent":["import { Badge } from '../types/types'\n\ninterface BadgeAction {\n    type: 'ADD_BADGE' | 'NOTIFY_BADGE' | 'REMOVE_BADGE',\n    payload: Badge\n}\n\nconst defaultState: Array<Badge> = [\n    {\n        id: 1,\n        src: '',\n        name: '',\n        description: '',\n        isAchieved: false,\n        isNotified: true,\n\n    }]\n\nconst addBadgeReducer = (state = defaultState, action: BadgeAction): Array<Badge> => {\n    const { payload } = action\n    switch (action.type) {\n        case 'ADD_BADGE':\n            return [\n                ...state,\n                {\n                    ...payload,\n                    isAchieved: true\n                }\n            ]\n        case 'NOTIFY_BADGE':\n            return [\n                ...state.map(badge => {\n                    if (badge.id === payload.id) {\n                        return ({\n                            ...badge,\n                            isNotified: true\n                        })\n                    } else {\n                        return badge\n                    }\n                }\n                )\n            ]\n        case 'REMOVE_BADGE':\n            console.log(state)\n            return [\n                ...state.filter(badge => badge.id !== payload.id)\n            ]\n\n        default:\n            return state\n    }\n}\nexport default addBadgeReducer"]},"metadata":{},"sourceType":"module"}