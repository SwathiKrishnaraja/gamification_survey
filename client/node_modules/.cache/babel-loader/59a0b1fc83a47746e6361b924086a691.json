{"ast":null,"code":"import _slicedToArray from\"/Users/gowthammohan/Swathi/gamification_survey/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useMemo}from'react';import Header from'../components/Header';import Footer from'../components/Footer';import Badges from'../components/Badges';import{useTranslation}from'react-i18next';import CustomProgressBar from'../components/CustomProgressBar';import SurveyQuestions from'../survey/GamifiedSurveyQuestions';import ExitSurvey from'../components/ExitSurvey';import badgeProvider from'../BadgeRules/BadgeRules';import{useDispatch}from'react-redux';var GamifiedSurvey=function GamifiedSurvey(){var dispatch=useDispatch();var provideBadge=useMemo(function(){return badgeProvider(dispatch);},[dispatch]);var _useState=useState(0),_useState2=_slicedToArray(_useState,2),progress=_useState2[0],setProgress=_useState2[1];var handleProgress=function handleProgress(){if(progress===88){setProgress(100);}else{setProgress(progress+11);}};useEffect(function(){provideBadge.badge.letsGoBadge();},[provideBadge.badge]);var _useTranslation=useTranslation(),t=_useTranslation.t;return/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(Header,{children:/*#__PURE__*/React.createElement(ExitSurvey,null)}),/*#__PURE__*/React.createElement(\"div\",{className:\"main-body\"},/*#__PURE__*/React.createElement(Badges,null),/*#__PURE__*/React.createElement(CustomProgressBar,{progress:progress}),/*#__PURE__*/React.createElement(SurveyQuestions,{progress:progress,handleProgress:handleProgress})),/*#__PURE__*/React.createElement(Footer,null));};export default GamifiedSurvey;","map":{"version":3,"sources":["/Users/gowthammohan/Swathi/gamification_survey/client/src/pages/GamifiedSurvey.tsx"],"names":["React","useEffect","useState","useMemo","Header","Footer","Badges","useTranslation","CustomProgressBar","SurveyQuestions","ExitSurvey","badgeProvider","useDispatch","GamifiedSurvey","dispatch","provideBadge","progress","setProgress","handleProgress","badge","letsGoBadge","t"],"mappings":"4KAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,CAAqCC,OAArC,KAAyE,OAAzE,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,iCAA9B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mCAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,0BAA1B,CACA,OAASC,WAAT,KAA4B,aAA5B,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAMC,CAAAA,QAAQ,CAAGF,WAAW,EAA5B,CACA,GAAMG,CAAAA,YAAY,CAAGZ,OAAO,CAAC,iBAAMQ,CAAAA,aAAa,CAACG,QAAD,CAAnB,EAAD,CAAgC,CAACA,QAAD,CAAhC,CAA5B,CAF2B,cAGKZ,QAAQ,CAAS,CAAT,CAHb,wCAGpBc,QAHoB,eAGVC,WAHU,eAK3B,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAIF,QAAQ,GAAK,EAAjB,CAAqB,CACnBC,WAAW,CAAC,GAAD,CAAX,CACD,CAFD,IAEO,CACLA,WAAW,CAACD,QAAQ,CAAG,EAAZ,CAAX,CACD,CACF,CAND,CAQAf,SAAS,CAAC,UAAM,CACdc,YAAY,CAACI,KAAb,CAAmBC,WAAnB,GACD,CAFQ,CAEN,CAACL,YAAY,CAACI,KAAd,CAFM,CAAT,CAb2B,oBAiBbZ,cAAc,EAjBD,CAiBnBc,CAjBmB,iBAiBnBA,CAjBmB,CAkB3B,mBACE,2BAAK,SAAS,CAAC,WAAf,eACE,oBAAC,MAAD,EAAQ,QAAQ,cAAE,oBAAC,UAAD,MAAlB,EADF,cAEE,2BAAK,SAAS,CAAC,WAAf,eACE,oBAAC,MAAD,MADF,cAEE,oBAAC,iBAAD,EAAmB,QAAQ,CAAEL,QAA7B,EAFF,cAGE,oBAAC,eAAD,EAAiB,QAAQ,CAAEA,QAA3B,CAAqC,cAAc,CAAEE,cAArD,EAHF,CAFF,cAQE,oBAAC,MAAD,MARF,CADF,CAYD,CA9BD,CAgCA,cAAeL,CAAAA,cAAf","sourcesContent":["import React, { useEffect, useState, useMemo, useCallback, useRef } from 'react';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport Badges from '../components/Badges'\nimport { useTranslation } from 'react-i18next';\nimport CustomProgressBar from '../components/CustomProgressBar'\nimport SurveyQuestions from '../survey/GamifiedSurveyQuestions'\nimport ExitSurvey from '../components/ExitSurvey';\nimport badgeProvider from '../BadgeRules/BadgeRules';\nimport { useDispatch } from 'react-redux';\n\nconst GamifiedSurvey = () => {\n  const dispatch = useDispatch()\n  const provideBadge = useMemo(() => badgeProvider(dispatch), [dispatch])\n  const [progress, setProgress] = useState<number>(0)\n\n  const handleProgress = () => {\n    if (progress === 88) {\n      setProgress(100)\n    } else {\n      setProgress(progress + 11)\n    }\n  }\n\n  useEffect(() => {\n    provideBadge.badge.letsGoBadge()\n  }, [provideBadge.badge])\n\n  const { t } = useTranslation()\n  return (\n    <div className=\"container\">\n      <Header children={<ExitSurvey />} />\n      <div className=\"main-body\">\n        <Badges />\n        <CustomProgressBar progress={progress} />\n        <SurveyQuestions progress={progress} handleProgress={handleProgress} />\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default GamifiedSurvey;\n"]},"metadata":{},"sourceType":"module"}