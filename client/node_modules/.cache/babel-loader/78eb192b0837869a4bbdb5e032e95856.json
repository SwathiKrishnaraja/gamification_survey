{"ast":null,"code":"import _objectSpread from\"/Users/gowthammohan/Swathi/gamification_survey/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/gowthammohan/Swathi/gamification_survey/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";var defaultState=[{id:1,src:'',name:'',description:'',isAchieved:false,isNotified:true}];var addBadgeReducer=function addBadgeReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultState;var action=arguments.length>1?arguments[1]:undefined;var payload=action.payload;switch(action.type){case'ADD_BADGE':return[].concat(_toConsumableArray(state),[_objectSpread(_objectSpread({},payload),{},{isAchieved:true})]);case'NOTIFY_BADGE':return _toConsumableArray(state.map(function(badge){if(badge.id===payload.id){return _objectSpread(_objectSpread({},badge),{},{isNotified:true});}else{return badge;}}));case'REMOVE_BADGE':console.log(state);return _toConsumableArray(state.filter(function(badge){return badge.id!==payload.id;}));default:return state;}};export default addBadgeReducer;","map":{"version":3,"sources":["/Users/gowthammohan/Swathi/gamification_survey/client/src/reducer/reducer.tsx"],"names":["defaultState","id","src","name","description","isAchieved","isNotified","addBadgeReducer","state","action","payload","type","map","badge","console","log","filter"],"mappings":"+VAOA,GAAMA,CAAAA,YAA0B,CAAG,CAC/B,CACIC,EAAE,CAAE,CADR,CAEIC,GAAG,CAAE,EAFT,CAGIC,IAAI,CAAE,EAHV,CAIIC,WAAW,CAAE,EAJjB,CAKIC,UAAU,CAAE,KALhB,CAMIC,UAAU,CAAE,IANhB,CAD+B,CAAnC,CAWA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAA6D,IAA5DC,CAAAA,KAA4D,2DAApDR,YAAoD,IAAtCS,CAAAA,MAAsC,8CACzEC,CAAAA,OADyE,CAC7DD,MAD6D,CACzEC,OADyE,CAEjF,OAAQD,MAAM,CAACE,IAAf,EACI,IAAK,WAAL,CACI,mCACOH,KADP,kCAGWE,OAHX,MAIQL,UAAU,CAAE,IAJpB,KAOJ,IAAK,cAAL,CACI,0BACOG,KAAK,CAACI,GAAN,CAAU,SAAAC,KAAK,CAAI,CAClB,GAAIA,KAAK,CAACZ,EAAN,GAAaS,OAAO,CAACT,EAAzB,CAA6B,CACzB,sCACOY,KADP,MAEIP,UAAU,CAAE,IAFhB,GAIH,CALD,IAKO,CACH,MAAOO,CAAAA,KAAP,CACH,CACJ,CATE,CADP,EAaJ,IAAK,cAAL,CACIC,OAAO,CAACC,GAAR,CAAYP,KAAZ,EACA,0BACOA,KAAK,CAACQ,MAAN,CAAa,SAAAH,KAAK,QAAIA,CAAAA,KAAK,CAACZ,EAAN,GAAaS,OAAO,CAACT,EAAzB,EAAlB,CADP,EAIJ,QACI,MAAOO,CAAAA,KAAP,CA9BR,CAgCH,CAlCD,CAmCA,cAAeD,CAAAA,eAAf","sourcesContent":["import { Badge } from '../types/types'\n\ninterface BadgeAction {\n    type: 'ADD_BADGE' | 'NOTIFY_BADGE' | 'REMOVE_BADGE',\n    payload: Badge\n}\n\nconst defaultState: Array<Badge> = [\n    {\n        id: 1,\n        src: '',\n        name: '',\n        description: '',\n        isAchieved: false,\n        isNotified: true,\n\n    }]\n\nconst addBadgeReducer = (state = defaultState, action: BadgeAction): Array<Badge> => {\n    const { payload } = action\n    switch (action.type) {\n        case 'ADD_BADGE':\n            return [\n                ...state,\n                {\n                    ...payload,\n                    isAchieved: true\n                }\n            ]\n        case 'NOTIFY_BADGE':\n            return [\n                ...state.map(badge => {\n                    if (badge.id === payload.id) {\n                        return ({\n                            ...badge,\n                            isNotified: true\n                        })\n                    } else {\n                        return badge\n                    }\n                }\n                )\n            ]\n        case 'REMOVE_BADGE':\n            console.log(state)\n            return [\n                ...state.filter(badge => badge.id !== payload.id)\n            ]\n\n        default:\n            return state\n    }\n}\nexport default addBadgeReducer"]},"metadata":{},"sourceType":"module"}