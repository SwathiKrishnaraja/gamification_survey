{"ast":null,"code":"import React from'react';import{useSelector}from'react-redux';var ShowBadge=function ShowBadge(_ref){var id=_ref.id,src=_ref.src,name=_ref.name,description=_ref.description,isAchieved=_ref.isAchieved;var styles='inactive-badge';var achievedBadge=useSelector(function(state){return state.filter(function(badge){return badge.isAchieved;});});if(achievedBadge.find(function(element){return element.id===id;})){styles='active-badge';}return/*#__PURE__*/React.createElement(\"div\",{className:\"individual-badge\"},/*#__PURE__*/React.createElement(\"img\",{className:styles,alt:name,src:src}),/*#__PURE__*/React.createElement(\"span\",{className:\"badge-tooltip\"},/*#__PURE__*/React.createElement(\"b\",null,name),/*#__PURE__*/React.createElement(\"br\",null),description));};export default ShowBadge;","map":{"version":3,"sources":["/Users/gowthammohan/Swathi/gamification_survey/client/src/components/ShowBadges.tsx"],"names":["React","useSelector","ShowBadge","id","src","name","description","isAchieved","styles","achievedBadge","state","filter","badge","find","element"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAuE,OAAvE,CAEA,OAASC,WAAT,KAA4B,aAA5B,CAGA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAuD,IAApDC,CAAAA,EAAoD,MAApDA,EAAoD,CAAhDC,GAAgD,MAAhDA,GAAgD,CAA3CC,IAA2C,MAA3CA,IAA2C,CAArCC,WAAqC,MAArCA,WAAqC,CAAxBC,UAAwB,MAAxBA,UAAwB,CACrE,GAAIC,CAAAA,MAAM,CAAG,gBAAb,CACA,GAAMC,CAAAA,aAAa,CAAGR,WAAW,CAAC,SAACS,KAAD,CAAyB,CACvD,MAAOA,CAAAA,KAAK,CAACC,MAAN,CAAa,SAACC,KAAD,QAAmBA,CAAAA,KAAK,CAACL,UAAzB,EAAb,CAAP,CACH,CAFgC,CAAjC,CAIA,GAAIE,aAAa,CAACI,IAAd,CAAmB,SAACC,OAAD,QAA6BA,CAAAA,OAAO,CAACX,EAAR,GAAeA,EAA5C,EAAnB,CAAJ,CAAwE,CACpEK,MAAM,CAAG,cAAT,CACH,CACD,mBACI,2BAAK,SAAS,CAAC,kBAAf,eACI,2BAAK,SAAS,CAAEA,MAAhB,CAAwB,GAAG,CAAEH,IAA7B,CAAmC,GAAG,CAAED,GAAxC,EADJ,cAEI,4BAAM,SAAS,CAAC,eAAhB,eACI,6BACKC,IADL,CADJ,cAII,8BAJJ,CAKKC,WALL,CAFJ,CADJ,CAYH,CArBD,CAuBA,cAAeJ,CAAAA,SAAf","sourcesContent":["import React, { useContext, useEffect, useRef, ReactHTMLElement } from 'react'\nimport { Badge } from '../types/types'\nimport { useSelector } from 'react-redux'\n\n\nconst ShowBadge = ({ id, src, name, description, isAchieved }: Badge) => {\n    let styles = 'inactive-badge'\n    const achievedBadge = useSelector((state: Array<Badge>) => {\n        return state.filter((badge: Badge) => (badge.isAchieved))\n    })\n\n    if (achievedBadge.find((element: { id: number }) => element.id === id)) {\n        styles = 'active-badge'\n    }\n    return (\n        <div className='individual-badge'>\n            <img className={styles} alt={name} src={src} />\n            <span className='badge-tooltip'>\n                <b>\n                    {name}\n                </b>\n                <br />\n                {description}\n            </span>\n        </div>\n    )\n}\n\nexport default ShowBadge"]},"metadata":{},"sourceType":"module"}