{"ast":null,"code":"var _jsxFileName = \"/Users/gowthammohan/Swathi/gamification_survey/src/survey/GamifiedSurveyQuestions.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport * as Survey from 'survey-react';\nimport { useHistory } from 'react-router-dom';\nimport badgeProvider from '../BadgeRules/BadgeRules';\nimport { useDispatch, useStore } from 'react-redux';\nimport json from './GamifiedSurveyJSON';\nexport const model = new Survey.Model(json);\n\nconst SurveyQuestions = ({\n  handleProgress\n}) => {\n  const dispatch = useDispatch();\n  const provideBadge = badgeProvider(dispatch);\n  const store = useStore();\n  const [isTactician, setIsTactician] = useState(0);\n  const history = useHistory();\n  const [answerStore, setAnswerStore] = useState([{\n    name: '',\n    id: '0',\n    isAnswered: true\n  }]);\n  const [count, setCount] = useState(0);\n  const listOfLastPageQuestions = ['q25', 'q26'];\n\n  const handleSurveyAnswer = (sender, options) => {\n    const {\n      question\n    } = options;\n\n    if (!answerStore.find(element => element.id === question.id)) {\n      setAnswerStore([...answerStore, {\n        name: question.name,\n        id: question.id,\n        isAnswered: question.isAnswered\n      }]);\n\n      if (question.isAnswered) {\n        setCount(count + 1);\n      }\n    }\n  };\n\n  const handlePageChange = (sender, options) => {\n    handleProgress();\n    const {\n      newCurrentPage,\n      oldCurrentPage\n    } = options; // stops the time of previous page and starts the new timer\n\n    model.stopTimer();\n    model.startTimer();\n    const timeSpentOnPreviousPage = oldCurrentPage === null || oldCurrentPage === void 0 ? void 0 : oldCurrentPage.timeSpent;\n\n    if (timeSpentOnPreviousPage > 1) {\n      setIsTactician(isTactician + 1);\n    } // below is the check to provide badge if the user has reached the last page of the survey\n\n\n    if (newCurrentPage.name === 'page8') {\n      provideBadge.badge.fastAchiever();\n    }\n  }; // below check is to provide the badge if all the questions in the last page is answered\n\n\n  useEffect(() => {\n    if (answerStore.filter(element => listOfLastPageQuestions.includes(element.name)).length === 2) {\n      provideBadge.badge.masterOfInterview();\n    }\n\n    if (isTactician === 8) {\n      setIsTactician(0);\n      provideBadge.badge.tactician();\n    }\n  }, [answerStore, isTactician, listOfLastPageQuestions, provideBadge.badge]);\n  useEffect(() => {\n    switch (count) {\n      case 9:\n        provideBadge.badge.thirtyThreeBadge();\n        break;\n\n      case 17:\n        provideBadge.badge.sixtySixBadge();\n        break;\n\n      case 26:\n        provideBadge.badge.fullPoints();\n        const currentStore = store.getState();\n\n        if (Object.keys(currentStore).length === 9) {\n          provideBadge.badge.medalCollector();\n        }\n\n        break;\n\n      default:\n        console.log(count);\n    }\n\n    return () => {};\n  }, [count, provideBadge.badge, store]);\n\n  const handleSurveyCompletion = () => {\n    provideBadge.badge.winner();\n    history.push('/Dashboard');\n  };\n\n  return /*#__PURE__*/React.createElement(Survey.Survey, {\n    model: model,\n    onValueChanged: handleSurveyAnswer,\n    onComplete: handleSurveyCompletion,\n    onCurrentPageChanged: handlePageChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default SurveyQuestions;","map":{"version":3,"sources":["/Users/gowthammohan/Swathi/gamification_survey/src/survey/GamifiedSurveyQuestions.tsx"],"names":["React","useState","useEffect","Survey","useHistory","badgeProvider","useDispatch","useStore","json","model","Model","SurveyQuestions","handleProgress","dispatch","provideBadge","store","isTactician","setIsTactician","history","answerStore","setAnswerStore","name","id","isAnswered","count","setCount","listOfLastPageQuestions","handleSurveyAnswer","sender","options","question","find","element","handlePageChange","newCurrentPage","oldCurrentPage","stopTimer","startTimer","timeSpentOnPreviousPage","timeSpent","badge","fastAchiever","filter","includes","length","masterOfInterview","tactician","thirtyThreeBadge","sixtySixBadge","fullPoints","currentStore","getState","Object","keys","medalCollector","console","log","handleSurveyCompletion","winner","push"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport * as Survey from 'survey-react'\nimport { useHistory } from 'react-router-dom'\nimport badgeProvider from '../BadgeRules/BadgeRules';\nimport { useDispatch, useSelector, useStore, shallowEqual } from 'react-redux';\nimport json from './GamifiedSurveyJSON'\n\nexport const model = new Survey.Model(json);\ntype AnswerStore = {\n    name: string,\n    id: string,\n    isAnswered: boolean\n}\n\ntype Props = {\n    progress: number,\n    handleProgress: () => void\n}\n\nconst SurveyQuestions = ({ handleProgress }: Props) => {\n    const dispatch = useDispatch()\n    const provideBadge = badgeProvider(dispatch)\n    const store = useStore()\n    const [isTactician, setIsTactician] = useState(0)\n\n    const history = useHistory()\n    const [answerStore, setAnswerStore] = useState<Array<AnswerStore>>([{ name: '', id: '0', isAnswered: true }])\n    const [count, setCount] = useState(0)\n    const listOfLastPageQuestions = ['q25', 'q26']\n\n    const handleSurveyAnswer = (sender: Survey.SurveyModel, options: any): any => {\n        const { question } = options\n        if (!(answerStore.find(element => element.id === question.id))) {\n            setAnswerStore([\n                ...answerStore,\n                {\n                    name: question.name,\n                    id: question.id,\n                    isAnswered: question.isAnswered\n                }\n            ])\n            if (question.isAnswered) {\n                setCount(count + 1)\n            }\n\n\n        }\n    }\n    const handlePageChange = (sender: Survey.SurveyModel, options: any): any => {\n        handleProgress()\n        const { newCurrentPage, oldCurrentPage } = options\n        // stops the time of previous page and starts the new timer\n        model.stopTimer()\n        model.startTimer()\n        const timeSpentOnPreviousPage = oldCurrentPage?.timeSpent\n        if (timeSpentOnPreviousPage > 1) {\n            setIsTactician(isTactician + 1)\n        }\n\n        // below is the check to provide badge if the user has reached the last page of the survey\n        if (newCurrentPage.name === 'page8') {\n            provideBadge.badge.fastAchiever()\n        }\n    }\n\n    // below check is to provide the badge if all the questions in the last page is answered\n    useEffect(() => {\n        if (answerStore\n            .filter(element => listOfLastPageQuestions.includes(element.name))\n            .length === 2) {\n            provideBadge.badge.masterOfInterview()\n        }\n        if (isTactician === 8) {\n            setIsTactician(0)\n            provideBadge.badge.tactician()\n        }\n    }, [answerStore, isTactician, listOfLastPageQuestions, provideBadge.badge])\n\n\n\n\n    useEffect(() => {\n        switch (count) {\n            case 9:\n                provideBadge.badge.thirtyThreeBadge()\n                break\n            case 17:\n                provideBadge.badge.sixtySixBadge()\n                break\n            case 26:\n                provideBadge.badge.fullPoints()\n                const currentStore = store.getState()\n                if (Object.keys(currentStore).length === 9) {\n                    provideBadge.badge.medalCollector()\n                }\n                break\n            default:\n                console.log(count)\n        }\n        return () => {\n        }\n    }, [count, provideBadge.badge, store])\n\n    const handleSurveyCompletion = () => {\n        provideBadge.badge.winner()\n        history.push('/Dashboard')\n    }\n\n    return (\n        <Survey.Survey model={model}\n            onValueChanged={handleSurveyAnswer}\n            onComplete={handleSurveyCompletion}\n            onCurrentPageChanged={handlePageChange}\n        />\n    )\n}\nexport default SurveyQuestions "]},"metadata":{},"sourceType":"module"}